{"version":3,"sources":["hero.png","home.js","getStarted.js","results.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","home","react_default","a","createElement","className","Link","to","src","hero","alt","GetStarted","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","fields","age","error_msg","e","setState","defineProperty","target","name","value","preventDefault","props","history","push","_this2","onSubmit","handleSubmit","type","onChange","handleChange","style","display","color","Component","results","App","BrowserRouter","Route","exact","path","component","getStarted","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.36abaaca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hero.d36c0784.png\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport hero from './hero.png';\n\nexport default function home() {\n    return (\n        <div>\n            <header className='App-header'>\n                <Link to= {'/'}>\n                    <div className='links'>\n                        Home\n                    </div>\n                </Link>\n                <Link to= {'/get-started'}>\n                    <div className='links'>\n                        Get Started\n                    </div>\n                </Link>\n            <img src={hero} className='App-logo' alt='logo' />\n            <p>\n                <h1>Start your fitness journey now!</h1>\n            </p>\n            </header>\n        </div>\n    );\n}","import React, { Component } from 'react';\n\nexport default class GetStarted extends Component{\n    constructor(){\n        super();\n        this.state = {\n            fields: {\n                age: ''\n            },\n            error_msg: {\n                age: ''\n            }\n        }\n    }\n\n    handleChange(e){\n        this.setState({\n            fields: {\n                [e.target.name]: e.target.value\n            },\n            error_msg: {\n                age: ''\n            }\n        });\n    }\n\n    handleSubmit(e){\n        e.preventDefault();\n        if(!this.state.fields.age){\n            this.setState({\n                error_msg: {\n                    age: 'Field is empty'\n                }\n            });\n        }\n        else{\n            this.props.history.push('/results', this.state.fields);\n        }\n    }\n\n    render(){\n        return(\n            <div className='get-started'>\n                <form className='get-started-form' onSubmit={(e) => this.handleSubmit(e)}>\n                    <label>\n                        Age\n                        <input type='text' name='age' value={this.state.fields.age} onChange={(e) => this.handleChange(e)} />\n                    </label>\n                    <div style={{display: 'inline-block', color: 'red'}}>{this.state.error_msg.age}</div>\n                    <br/>\n                    <input type='submit' value='Get Started'/>\n                </form>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function results() {\n    return (\n        <div>\n            <Link to= {'/'}>\n                <div className='links'>\n                    Home\n                </div>\n            </Link>\n            <Link to= {'/get-started'}>\n                <div className='links'>\n                    Back to get started!\n                </div>\n            </Link>\n        </div>\n    );\n}","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport home from './home'\nimport getStarted from './getStarted'\nimport results from './results'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className='App'>\n            <Route exact path='' component={home} />\n            <Route exact path='/get-started' component={getStarted} />\n            <Route exact path='/results' component={results} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}